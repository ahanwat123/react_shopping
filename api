
Future<TokenModel> postRegistrationDetails(
    String? userName, String? password) async {
  Map data = {
    "grant_type": "password",
    "Username": userName,
    "Password": password,
  };
  late http.Response response;
  try {
    response = await http
        .post(
          Uri.parse('${UserDetail.currentUrl}token'),
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
          },
          body: data,
        )
        .timeout(Duration(seconds: 5));
  } catch (E) {
    Connectivity connectivity = Connectivity();
    await connectivity.checkConnectivity().then((value) => {
          if (value == ConnectivityResult.none)
            {
              throw "NoInternet",
            }
          else
            throw "ErrorHasOccurred"
        });
  }
  if (response.statusCode == 201 || response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    if (response.body == "Unable to Connect to remote Server") {
      throw 500;
    } else {
      if (response.body.isNotEmpty)
        return TokenModel.fromJson(json.decode(response.body));
      else
        throw "NoData";
    }
  } else if (response.statusCode == 500) {
    throw 500;
  } else {
    throw "ErrorHasOccurred";
  }
}
--------------------------------------------------------------------------------------------------------
class TokenModel {
  final String? accessToken;
  final String? tokenType;
  final int? expiresIn;
  final String? userName;
  final String? issued;
  final String? expires;

  TokenModel({this.accessToken,this.tokenType,this.expiresIn,this.userName, this.issued,this.expires});
  factory TokenModel.fromJson(Map<String, dynamic> json) {
    return TokenModel(
      accessToken: json['access_token'],
      tokenType: json['token_type'],
      expiresIn: json['expires_in'],
      userName: json['userName'],
      issued: json['.issued'],
      expires: json['.expires'],
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'access_token': accessToken,
      'token_type': tokenType,
      'expires_in': expiresIn,
      'userName': userName,
      'issued': issued,
      'expires': expires,
    };
  }
}
---------------------------------------------------------------------------------------------------------------------------
https://api.codeplayers.in/
