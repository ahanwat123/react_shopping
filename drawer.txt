Future<TokenModel> postRegistrationDetails(
    String? userName, String? password) async {
  Map data = {
    "grant_type": "password",
    "Username": userName,
    "Password": password,
  };
  late http.Response response;
  try {
    response = await http
        .post(
          Uri.parse('${UserDetail.currentUrl}token'),
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
          },
          body: data,
        )
        .timeout(Duration(seconds: 5));
  } catch (E) {
    Connectivity connectivity = Connectivity();
    await connectivity.checkConnectivity().then((value) => {
          if (value == ConnectivityResult.none)
            {
              throw "NoInternet",
            }
          else
            throw "ErrorHasOccurred"
        });
  }
  if (response.statusCode == 201 || response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    if (response.body == "Unable to Connect to remote Server") {
      throw 500;
    } else {
      if (response.body.isNotEmpty)
        return TokenModel.fromJson(json.decode(response.body));
      else
        throw "NoData";
    }
  } else if (response.statusCode == 500) {
    throw 500;
  } else {
    throw "ErrorHasOccurred";
  }
}
------------------------------------------------------------------------------------------------
Future<void> _handleSubmitted() async {
    try {
      setState(() {
        isLoading = true;
      });
      UserDetail.token =
          await getToken(nameController.text, encrypt(passwordController.text));
      // UserDetail.token=await getToken("utkarshagrawal90@gmail.com", "YWFhYWFhYWE=");
      setState(() {
        isLoading = false;
      });
      Navigator.of(context).pushReplacement(new CupertinoPageRoute<void>(
          builder: (context) => CompanyPage(
                isNotBottomSheet: true,
              )));
    } catch (E1) {
      FocusScope.of(context).unfocus();
      setState(() {
        isLoading = false;
      });
      if (E1.toString() == "NoInternet")
        globalShowInSnackBar(scaffoldMessengerKey, "No Internet Connection!!");
      else if (E1.toString() == "500")
        globalShowInSnackBar(scaffoldMessengerKey,
            "Something went wrong on our side, we are working on it");
      else if (E1.toString() == "NoData")
        globalShowInSnackBar(
            scaffoldMessengerKey, "Please Enter Correct Username and Password");
      else if (E1.toString() == "ErrorHasOccurred")
        globalShowInSnackBar(scaffoldMessengerKey, "Something went wrong!!");
    }
  }
----------------------------------------------------------------------------------------------
Future<TokenModel?> getToken(String? userName, String? password) async {
  TokenModel? token;
  await postRegistrationDetails(userName, password).then((TokenModel value) async => {
        token = value,
        await DatabaseHandler.db.insertToken(value),
        UserDetail.isTokenGenerated = true,
        setIsLogined(true),
        setUserCred(userName!, password!)
      });
  return token;
}
--------------------------------------------------------------------------------------------
void globalShowInSnackBar(GlobalKey<ScaffoldMessengerState> scaffoldMessengerKey, String value) {
  scaffoldMessengerKey.currentState!.hideCurrentSnackBar();
  if (value == "ErrorHasOccurred")
    value = "Oops!! Error 404.";
  else if (value == "NoData")
    value = "No data received.";
  else if (value == "500")
    value = "Oops!! Error 500, It's not you, It's us.";
  else if (value == "NoInternet") value = "No Internet Connections present!!";
  scaffoldMessengerKey.currentState!.showSnackBar(SnackBar(
    content: Text(value),
  ));
}
